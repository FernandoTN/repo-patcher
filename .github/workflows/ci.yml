# CI/CD Pipeline for Repo Patcher
# Runs on all pushes and pull requests

name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scan
    - cron: '0 6 * * 1'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Code quality and linting
  quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: 🔍 Run Ruff Linting
        run: ruff check . --output-format=github
      
      - name: ✨ Check Code Formatting (Black)
        run: black --check --diff .
      
      - name: 🔒 Type Checking (MyPy)
        run: mypy src/ --ignore-missing-imports
        continue-on-error: true

  # Unit and integration testing
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: 🧪 Run Tests
        run: |
          pytest tests/ -v --cov=src/repo_patcher --cov-report=xml --cov-report=term-missing
      
      - name: 📊 Upload Coverage
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: false

  # Security scanning
  security:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔍 Run Bandit Security Scan
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json || true
      
      - name: 🕵️ Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Docker build and test
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🏗️ Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: repo-patcher:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🧪 Test Docker Container
        run: |
          docker run --rm repo-patcher:test --version
          docker run --rm repo-patcher:test --help
      
      - name: 🔐 Scan Docker Image for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'repo-patcher:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📤 Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration testing with evaluation scenarios  
  integration:
    name: 🔧 Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' || github.event_name == 'schedule'
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: 🧪 Run Evaluation Scenarios
        run: |
          echo "Running evaluation scenarios..."
          python scripts/run_evaluation.py scenarios/ --max-scenarios 3
        continue-on-error: true
      
      - name: 📊 Generate Integration Report
        run: |
          echo "# Integration Test Results" > integration-report.md
          echo "Date: $(date)" >> integration-report.md
          echo "Commit: ${{ github.sha }}" >> integration-report.md
          echo "" >> integration-report.md
          echo "## Test Results" >> integration-report.md
          echo "Integration tests completed (see logs for details)" >> integration-report.md
      
      - name: 📤 Upload Integration Results
        uses: actions/upload-artifact@v4
        with:
          name: integration-results-${{ github.run_number }}
          path: integration-report.md

  # Build and publish Docker image (on main branch)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [quality, test, security, docker, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔑 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🚀 Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 📝 Create Release Notes
        run: |
          echo "# 🚀 New Release: ${{ github.sha }}" > release-notes.md
          echo "" >> release-notes.md
          echo "## Changes" >> release-notes.md
          echo "- Built from commit: ${{ github.sha }}" >> release-notes.md
          echo "- Docker image: ghcr.io/${{ github.repository }}:latest" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Usage" >> release-notes.md
          echo '```bash' >> release-notes.md
          echo 'docker pull ghcr.io/${{ github.repository }}:latest' >> release-notes.md
          echo 'docker run --rm ghcr.io/${{ github.repository }}:latest --help' >> release-notes.md
          echo '```' >> release-notes.md

  # Performance benchmarking
  benchmark:
    name: 📈 Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-benchmark
      
      - name: ⚡ Run Performance Tests
        run: |
          echo "Running performance benchmarks..."
          # Add actual benchmark tests here when implemented
          echo "Benchmarks completed"
      
      - name: 📊 Archive Benchmark Results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.run_number }}
          path: benchmark-results/